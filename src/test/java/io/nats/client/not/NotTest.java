/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.nats.client.not;

import org.junit.Test;

import io.nats.client.Message;
import io.nats.client.impl.NatsMessageCheater;
import io.opentracing.Span;
import io.opentracing.SpanContext;
import io.opentracing.Tracer;
import io.opentracing.propagation.Format;

import static org.junit.Assert.*;

import java.nio.ByteBuffer;

public class NotTest {
    @Test
    public void simpleInitTest() {
        Not.initTracing("test");
    }

    @Test
    public void testEndToEnd() {

        // Publish side...
        Tracer sendTracer = Not.initTracing("send");
        Span span = sendTracer.buildSpan("sendspan").start();
        span.setBaggageItem("k1", "v1");
        SpanContext sendContext = span.context();

        ByteBuffer carrier = ByteBuffer.allocate(128);
        sendTracer.inject(sendContext, Format.Builtin.BINARY, carrier);
        String origData = new String("hello");

        // encode, here we would send the data over the wire, and it'd be received
        // as a nats message on the other side.
        byte[] wireData = Not.createTracePayload(carrier, origData.getBytes());
        Message m = NatsMessageCheater.createMessage("foo", "bar", wireData);

        // Receive side...
        Tracer recvTracer = Not.initTracing("receive");
        TraceMessage tm = Not.createTraceMessage(recvTracer, m);
        assertTrue(new String(tm.getData()).equals(origData));
        assertTrue(tm.getSubject().equals("foo"));
        assertTrue(tm.getReplyTo().equals("bar"));
        
        SpanContext recvContext = tm.getSpanContext();
        Span childSpan = recvTracer.buildSpan("foo").asChildOf(recvContext).start();
        assertTrue(childSpan.getBaggageItem("k1").equals("v1"));
    }

    @Test
    public void testNonTraceMessage() {

        // Publish side...
        byte[] wireData = new String("hello").getBytes();
        Message m = NatsMessageCheater.createMessage("foo", "bar", wireData);

        // Receive side...
        Tracer recvTracer = Not.initTracing("receive");
        TraceMessage tm = Not.createTraceMessage(recvTracer, m);
        assertTrue(new String(tm.getData()).equals("hello"));
        assertTrue(tm.getSubject().equals("foo"));
        assertTrue(tm.getReplyTo().equals("bar"));
        
        SpanContext recvContext = tm.getSpanContext();
        assertTrue(recvContext == null);
    }    
}
